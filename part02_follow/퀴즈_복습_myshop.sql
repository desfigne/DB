/*================================================================================================================================================
==================================================================================================================================================

	실습 데이터베이스 연결 : myshop2019
	실습 내용 - 기본적인 데이터 조회

==================================================================================================================================================
=================================================================================================================================================*/

show databases;
use myshop2019;
select database();
show tables;



/*________________________________________________________________________________________________________________________________________________

	Q01) customer 테이블 모든 행과 열을 조회하고 어떤 열들이 있는지, 데이터 형식은 어떻게 되는지 살펴보세요.

-------------------------------------------------------------------------------------------------------------------------------------------------*/

select * from customer;
-- : customer_id / customer_name / gender
-- > 고객 아이디 / 고객 이름 / 고객 성별

-- : phone / email
-- > 고객 핸드폰 번호 / 고객 이메일

-- : city / birth_date / register_date
-- > 고객 거주 도시 / 고객 생일 / 고객 등록일

-- : point
-- > 고객 포인트
    
    
-- -----------------------------------------------------------------------------------------------------------------------------------------------

DESC CUSTOMER;
SELECT * FROM CUSTOMER;



/*________________________________________________________________________________________________________________________________________________

	Q02) employee 테이블 모든 행과 열을 조회하고 어떤 열들이 있는지, 데이터 형식은 어떻게 되는지 살펴보세요.

-------------------------------------------------------------------------------------------------------------------------------------------------*/

select * from employee;
-- : employee_id / employee_name / gender
-- > 직원 번호 / 직원 이름 / 직원 성별

-- : phone / email
-- > 직원 핸드폰 번호 / 직원 이메일

-- : hire_date / retire_date
-- > 직원 입사일 / 직원 퇴사일
    
    
-- -----------------------------------------------------------------------------------------------------------------------------------------------

DESC EMPLOYEE;
SELECT * FROM EMPLOYEE;



/*________________________________________________________________________________________________________________________________________________

	Q03) product 테이블 모든 행과 열을 조회하고 어떤 열들이 있는지, 데이터 형식은 어떻게 되는지 살펴보세요.

-------------------------------------------------------------------------------------------------------------------------------------------------*/

select * from product;
-- : product_id / product_name
-- > 제품 코드 / 제품 이름

-- : sub_category_id
-- > 하위 카테고리 코드
    
    
-- -----------------------------------------------------------------------------------------------------------------------------------------------

DESC PRODUCT;
SELECT * FROM PRODUCT;



/*________________________________________________________________________________________________________________________________________________

	Q04) order_header 테이블 모든 행과 열을 조회하고 어떤 열들이 있는지, 데이터 형식은 어떻게 되는지 살펴보세요.

-------------------------------------------------------------------------------------------------------------------------------------------------*/

select * from order_header;
-- : order_id / customer_id / employee_id
-- > 주문 번호 / 고객 아이디 / 직원 번호

-- : order_date
-- > 주문 일시

-- : sub_total / delivery_fee / total_due
-- > 제품 금액(왜 서브가 붙어있는지...?) / 배송비 / 총합 금액
    
    
-- -----------------------------------------------------------------------------------------------------------------------------------------------

DESC ORDER_HEADER;
SELECT * FROM ORDER_HEADER;



/*________________________________________________________________________________________________________________________________________________

	Q05) order_detail 테이블 모든 행과 열을 조회하고 어떤 열들이 있는지, 데이터 형식은 어떻게 되는지 살펴보세요.

-------------------------------------------------------------------------------------------------------------------------------------------------*/

select * from order_detail;
-- : order_id / order_detail_id (현재 오타로 order가 아닌 drder로 되어있는 것으로 추정) / product_id
-- > 주문 번호 / 주문 상세 번호 / 제품 코드

-- : order_qty / unit_price / discount / line_total
-- > 제품 주문 수량 / 제품 금액 / 할인가(총합 금액에서 1회 단일 할인) / 할인 제외 종합 금액
    
    
-- -----------------------------------------------------------------------------------------------------------------------------------------------

DESC ORDER_DETAIL;
SELECT * FROM ORDER_DETAIL;



/*________________________________________________________________________________________________________________________________________________

	Q06) 모든 고객의 아이디, 이름, 지역, 성별, 이메일, 전화번호를 조회하세요.

-------------------------------------------------------------------------------------------------------------------------------------------------*/

select * from customer;
select customer_id, customer_name, city, gender, email, phone from customer;
    
    
-- -----------------------------------------------------------------------------------------------------------------------------------------------

SELECT CUSTOMER_ID, CUSTOMER_NAME, CITY, GENDER, EMAIL, PHONE 
	FROM CUSTOMER;



/*________________________________________________________________________________________________________________________________________________

	Q07) 모든 직원의 이름, 사원번호, 성별, 입사일, 전화번호를 조회하세요.

-------------------------------------------------------------------------------------------------------------------------------------------------*/

select * from employee;
select employee_name, employee_id, gender, hire_date, phone from employee;
    
    
-- -----------------------------------------------------------------------------------------------------------------------------------------------

SELECT * FROM EMPLOYEE;
SELECT EMPLOYEE_NAME, EMPLOYEE_ID, GENDER, HIRE_DATE, PHONE
	FROM EMPLOYEE;



/*________________________________________________________________________________________________________________________________________________

	Q08) 이름이 '홍길동'인 고객의 이름, 아이디, 성별, 지역, 전화번호, 포인트를 조회하세요.

-------------------------------------------------------------------------------------------------------------------------------------------------*/

select * from customer;
select customer_name, customer_id, gender, city, phone, point from customer where customer_name ='홍길동';
    
    
-- -----------------------------------------------------------------------------------------------------------------------------------------------

SELECT CUSTOMER_NAME, CUSTOMER_ID, GENDER, CITY, PHONE, POINT
	FROM CUSTOMER
    WHERE CUSTOMER_NAME = '홍길동';



/*________________________________________________________________________________________________________________________________________________

	Q09) 여자 고객의 이름, 아이디, 성별, 지역, 전화번호, 포인트를 조회하세요.

-------------------------------------------------------------------------------------------------------------------------------------------------*/

select * from customer;
select customer_name, customer_id, gender, city, phone, point from customer where gender = 'F';
    
    
-- -----------------------------------------------------------------------------------------------------------------------------------------------

SELECT CUSTOMER_NAME, CUSTOMER_ID, GENDER, CITY, PHONE, POINT
	FROM CUSTOMER
    WHERE GENDER = 'F';



/*________________________________________________________________________________________________________________________________________________

	Q10) '울산' 지역 고객의 이름, 아이디, 성별, 지역, 전화번호, 포인트를 조회하세요.

-------------------------------------------------------------------------------------------------------------------------------------------------*/

select * from customer;
select customer_name, customer_id, gender, city, phone, point from customer where city = '울산';
    
    
-- -----------------------------------------------------------------------------------------------------------------------------------------------

SELECT CUSTOMER_NAME, CUSTOMER_ID, GENDER, CITY, PHONE, POINT
	FROM CUSTOMER
    WHERE CITY = '울산';



/*________________________________________________________________________________________________________________________________________________

	Q11) 포인트가 500,000 이상인 고객의 이름, 아이디, 성별, 지역, 전화번호, 포인트를 조회하세요.

-------------------------------------------------------------------------------------------------------------------------------------------------*/

select * from customer;
select customer_name, customer_id, gender, city, phone, point from customer where point >= 500000;
    
    
-- -----------------------------------------------------------------------------------------------------------------------------------------------

SELECT CUSTOMER_NAME, CUSTOMER_ID, GENDER, CITY, PHONE, POINT
	FROM CUSTOMER
    WHERE GENDER = 'F';



/*________________________________________________________________________________________________________________________________________________

	Q12) 이름에 공백이 들어간 고객의 이름, 아이디, 성별, 지역, 전화번호, 포인트를 조회하세요.

-------------------------------------------------------------------------------------------------------------------------------------------------*/

select * from customer;
select customer_name, customer_id, gender, city, phone, point from customer where customer_name = null; -- 조회 안됨
select customer_name, customer_id, gender, city, phone, point from customer where customer_name is null;
-- ㄴ 오답, 이름에 값 자체가 없는 경우에 is null 사용

select customer_name, customer_id, gender, city, phone, point from customer where customer_name like '% %';

    
-- -----------------------------------------------------------------------------------------------------------------------------------------------

SELECT CUSTOMER_NAME, CUSTOMER_ID, GENDER, CITY, PHONE, POINT
	FROM CUSTOMER
    WHERE CUSTOMER_NAME LIKE '% %';



/*________________________________________________________________________________________________________________________________________________

	Q13) 전화번호가 010으로 시작하지 않는 고객의 이름, 아이디, 성별, 지역, 전화번호, 포인트를 조회하세요.

-------------------------------------------------------------------------------------------------------------------------------------------------*/

select * from customer;
select customer_name, customer_id, gender, city, phone, point from customer where phone not like '010%';
    
    
-- -----------------------------------------------------------------------------------------------------------------------------------------------

SELECT CUSTOMER_NAME, CUSTOMER_ID, GENDER, CITY, PHONE, POINT
	FROM CUSTOMER
    WHERE PHONE NOT LIKE '010%';



/*________________________________________________________________________________________________________________________________________________

	Q14) 포인트가 500,000 이상 '서울' 지역 고객의 이름, 아이디, 성별, 지역, 전화번호, 포인트를 조회하세요.

-------------------------------------------------------------------------------------------------------------------------------------------------*/

select * from customer;
select customer_name, customer_id, gender, city, phone, point from customer where point >= 500000 and city = '서울';
    
    
-- -----------------------------------------------------------------------------------------------------------------------------------------------

SELECT CUSTOMER_NAME, CUSTOMER_ID, GENDER, CITY, PHONE, POINT
	FROM CUSTOMER
    WHERE POINT >= 500000 AND CITY = '서울';



/*________________________________________________________________________________________________________________________________________________

	Q15) 포인트가 500,000 이상인 '서울' 이외 지역 고객의 이름, 아이디, 성별, 지역, 전화번호, 포인트를 조회하세요.

-------------------------------------------------------------------------------------------------------------------------------------------------*/

select * from customer;
select customer_name, customer_id, gender, city, phone, point from customer where point >= 500000 and city not like '서울';
-- ㄴ 오답, 출력 결과값은 동일하게 나오나 특정 단어를 칭할때는 != 또는 <>를 사용, 패턴을 포함 및 제외할 경우에 like를 쓰는게 더 바람직함

select customer_name, customer_id, gender, city, phone, point from customer where point >= 500000 and city != '서울';
    
    
-- -----------------------------------------------------------------------------------------------------------------------------------------------

SELECT CUSTOMER_NAME, CUSTOMER_ID, GENDER, CITY, PHONE, POINT
	FROM CUSTOMER
    WHERE POINT >= 500000 AND CITY != '서울';



/*________________________________________________________________________________________________________________________________________________

	Q16) 포인트가 400,000 이상인 '서울' 지역 남자 고객의 이름, 아이디, 성별, 지역, 전화번호, 포인트를 조회하세요.

-------------------------------------------------------------------------------------------------------------------------------------------------*/

select * from customer;
select customer_name, customer_id, gender, city, phone, point from customer where point >= 400000 and city = '서울' and gender ='M';
    
    
-- -----------------------------------------------------------------------------------------------------------------------------------------------

SELECT CUSTOMER_NAME, CUSTOMER_ID, GENDER, CITY, PHONE, POINT
	FROM CUSTOMER
    WHERE POINT >= 400000 AND CITY = '서울' AND GENDER = 'M';



/*________________________________________________________________________________________________________________________________________________

	Q17) '강릉' 또는 '원주' 지역 고객의 이름, 아이디, 성별, 지역, 전화번호, 포인트를 조회하세요.

-------------------------------------------------------------------------------------------------------------------------------------------------*/

select * from customer;
select customer_name, customer_id, gender, city, phone, point from customer where city = '강릉' or city = '원주';
-- ㄴ 오답, 출력 결과값은 동일하게 나오나 조건 대상이 많아질 때 여러 값을 한번에 지정할 수 있어 더 간결하고 직관적임

select customer_name, customer_id, gender, city, phone, point from customer where city in ('강릉', '원주');
    
    
-- -----------------------------------------------------------------------------------------------------------------------------------------------

SELECT CUSTOMER_NAME, CUSTOMER_ID, GENDER, CITY, PHONE, POINT
	FROM CUSTOMER
    WHERE CITY IN ('강릉', '원주');



/*________________________________________________________________________________________________________________________________________________

	Q18) '서울' 또는 '부산' 또는 '제주' 또는 '인천' 지역 고객의 이름, 아이디, 성별, 지역, 전화번호, 포인트를 조회하세요.

-------------------------------------------------------------------------------------------------------------------------------------------------*/

select * from customer;
select customer_name, customer_id, gender, city, phone, point from customer where city = '서울' or city = '부산' or city = '제주' or city = '인천';
-- ㄴ 오답, 출력 결과값은 동일하게 나오나 조건 대상이 많아질 때 여러 값을 한번에 지정할 수 있어 더 간결하고 직관적임

select customer_name, customer_id, gender, city, phone, point from customer where city in ('서울', '부산', '제주', '인천');
    
    
-- -----------------------------------------------------------------------------------------------------------------------------------------------

SELECT CUSTOMER_NAME, CUSTOMER_ID, GENDER, CITY, PHONE, POINT
	FROM CUSTOMER
    WHERE CITY IN ('서울', '부산', '제주', '인천');



/*________________________________________________________________________________________________________________________________________________

	Q19) 포인트가 400,000 이상, 500,000 이하인 고객의 이름, 아이디, 성별, 지역, 전화번호, 포인트를 조회하세요.

-------------------------------------------------------------------------------------------------------------------------------------------------*/

select * from customer;
select customer_name, customer_id, gender, city, phone, point from customer where point >= 400000 and point <= 500000;
-- ㄴ 오답, 출력 결과값은 동일하게 나오나 쿼리가 더 짧고 이해하기 쉬워 실무에서 선호됨

select customer_name, customer_id, gender, city, phone, point from customer where point between 400000 and 500000;
    
    
-- -----------------------------------------------------------------------------------------------------------------------------------------------

SELECT CUSTOMER_NAME, CUSTOMER_ID, GENDER, CITY, PHONE, POINT
	FROM CUSTOMER
    WHERE POINT BETWEEN 400000 AND 500000 ;



/*________________________________________________________________________________________________________________________________________________

	Q20) 1990년에 출생한 고객의 이름, 아이디, 성별, 지역, 전화번호, 생일, 포인트를 조회하세요.

-------------------------------------------------------------------------------------------------------------------------------------------------*/

select * from customer;
select customer_name, customer_id, gender, city, phone, birth_date, point from customer where birth_date like '1990-%';
-- ㄴ 오답, 출력 결과값은 동일하게 나오나 다른 접근 방식, 둘 다 문자열 함수와 데이터 타입끼리 내부적으로 변환이 필요할 수 있음

select customer_name, customer_id, gender, city, phone, birth_date, point from customer where left(birth_date, 4) = '1990';
    
    
-- -----------------------------------------------------------------------------------------------------------------------------------------------

SELECT CUSTOMER_NAME, CUSTOMER_ID, GENDER, CITY, PHONE, BIRTH_DATE, POINT
	FROM CUSTOMER
    WHERE LEFT(BIRTH_DATE,4) = '1990' ;
    
    
-- -----------------------------------------------------------------------------------------------------------------------------------------------
-- < 퍼플렉시티가 답변한 가독성 및 표준성 측면에서의 답 >

	SELECT customer_name, customer_id, gender, city, phone, birth_date, point
	FROM customer
	WHERE year(birth_date) = 1990;



/*________________________________________________________________________________________________________________________________________________

	Q21) 1990년에 출생한 여자 고객의 이름, 아이디, 성별, 지역, 전화번호, 생일, 포인트를 조회하세요.

-------------------------------------------------------------------------------------------------------------------------------------------------*/

select * from customer;
select customer_name, customer_id, gender, city, phone, birth_date, point from customer where gender = 'F' and birth_date like '1990-%';
-- ㄴ 오답, 출력 결과값은 동일하게 나오나 다른 접근 방식

select customer_name, customer_id, gender, city, phone, birth_date, point from customer where left(birth_date, 4) = '1990' and gender = 'F';
    
    
-- -----------------------------------------------------------------------------------------------------------------------------------------------

SELECT CUSTOMER_NAME, CUSTOMER_ID, GENDER, CITY, PHONE, BIRTH_DATE, POINT
	FROM CUSTOMER
    WHERE LEFT(BIRTH_DATE,4) = '1990' AND GENDER ='F' ; 



/*________________________________________________________________________________________________________________________________________________

	Q22) 1990년에 출생한 '대구' 또는 '경주' 지역 남자 고객의 이름, 아이디, 성별, 지역, 전화번호, 생일, 포인트를 조회하세요.

-------------------------------------------------------------------------------------------------------------------------------------------------*/

select * from customer;
select customer_name, customer_id, gender, city, phone, birth_date, point from customer where gender = 'M' and birth_date like '1990-%' and (city ='대구' or city = '경주');
-- ㄴ 오답, 출력 결과값은 동일하게 나오나 다른 접근 방식으로 강사님 쿼리가 가독성과 유지보수 측면에서 더 권장

select customer_name, customer_id, gender, city, phone, birth_date, point from customer where left(birth_date, 4) = '1990' and city in ('대구', '경주') and gender = 'M';
    
    
-- -----------------------------------------------------------------------------------------------------------------------------------------------

SELECT CUSTOMER_NAME, CUSTOMER_ID, GENDER, CITY, PHONE, BIRTH_DATE, POINT
	FROM CUSTOMER
    WHERE LEFT(BIRTH_DATE,4) = '1990' AND CITY IN ('대구', '경주') AND GENDER ='M' ; 
    
    
-- -----------------------------------------------------------------------------------------------------------------------------------------------
-- < 퍼플렉시티가 답변한 가독성 및 표준성 측면에서의 답 >

	SELECT CUSTOMER_NAME, CUSTOMER_ID, GENDER, CITY, PHONE, BIRTH_DATE, POINT
		FROM CUSTOMER
		WHERE year(BIRTH_DATE,4) = '1990' AND CITY IN ('대구', '경주') AND GENDER ='M' ; 



/*________________________________________________________________________________________________________________________________________________

	Q23) 1990년에 출생한 남자 고객의 이름, 아이디, 성별, 지역, 전화번호, 생일, 포인트를 조회하세요.
	     단, 홍길동(gildong) 형태로 이름과 아이디를 묶어서 조회하세요.

-------------------------------------------------------------------------------------------------------------------------------------------------*/

select * from customer;
select concat(customer_name, '(', customer_id, ')') as '이름(아이디)', gender, city, phone, birth_date, pointfrom customer where gender = 'M' and birth_date like '1990-%';
-- ㄴ 오답, 출력 결과값은 동일하게 나오나 다른 접근 방식

select concat(customer_name, '(', customer_id, ')') customer_name, gender, city, phone, birth_date, pointfrom customer where left(birth_date, 4) = '1990' and gender = 'M';

    
-- -----------------------------------------------------------------------------------------------------------------------------------------------

SELECT CONCAT(CUSTOMER_NAME, '(', CUSTOMER_ID, ')') CUSTOMER_NAME, GENDER, CITY, PHONE, BIRTH_DATE, POINT
	FROM CUSTOMER
    WHERE LEFT(BIRTH_DATE,4) = '1990' AND GENDER ='M' ; 
    
    
-- -----------------------------------------------------------------------------------------------------------------------------------------------
-- < 퍼플렉시티가 답변한 가독성 및 표준성 측면에서의 답 >

	select concat(customer_name, '(', customer_id, ')') customer_name, gender, city, phone, birth_date, pointfrom customer
	where year(birth_date, 4) = '1990' and gender = 'M';



/*________________________________________________________________________________________________________________________________________________

	Q24) 근무중인 직원의 이름, 사원번호, 성별, 전화번호, 입사일를 조회하세요.

-------------------------------------------------------------------------------------------------------------------------------------------------*/

select * from employee;
select employee_name, employee_id, gender, phone, hire_date from employee where retire_date is null;
    
    
-- -----------------------------------------------------------------------------------------------------------------------------------------------

SELECT * FROM EMPLOYEE;
SELECT EMPLOYEE_NAME, EMPLOYEE_ID, GENDER, PHONE, HIRE_DATE
	FROM EMPLOYEE
	WHERE RETIRE_DATE IS NULL;



/*________________________________________________________________________________________________________________________________________________

	Q25) 근무중인 남자 직원의 이름, 사원번호, 성별, 전화번호, 입사일를 조회하세요.

-------------------------------------------------------------------------------------------------------------------------------------------------*/

select * from employee;
select employee_name, employee_id, gender, phone, hire_date from employee where gender = 'M' and retire_date is null;

select employee_name, employee_id, gender, phone, hire_date from employee where retire_date is null and gender = 'M';
    
    
-- -----------------------------------------------------------------------------------------------------------------------------------------------

SELECT EMPLOYEE_NAME, EMPLOYEE_ID, GENDER, PHONE, HIRE_DATE
	FROM EMPLOYEE
	WHERE RETIRE_DATE IS NULL AND GENDER = 'M';



/*________________________________________________________________________________________________________________________________________________

	Q26) 퇴사한 직원의 이름, 사원번호, 성별, 전화번호, 입사일, 퇴사일를 조회하세요.

-------------------------------------------------------------------------------------------------------------------------------------------------*/

select * from employee;
select employee_name, employee_id, gender, phone, hire_date from employee where retire_date is not null;
    
    
-- -----------------------------------------------------------------------------------------------------------------------------------------------

SELECT EMPLOYEE_NAME, EMPLOYEE_ID, GENDER, PHONE, HIRE_DATE
	FROM EMPLOYEE
	WHERE RETIRE_DATE IS NOT NULL;



/*________________________________________________________________________________________________________________________________________________

	Q28) 2019-01-01 ~ 2019-01-07 기간 주문의 주문번호, 고객아이디, 사원번호, 주문일시, 소계, 배송비, 전체금액을 조회하세요.
	     단, 고객아이디를 기준으로 오름차순 정렬해서 조회하세요.

-------------------------------------------------------------------------------------------------------------------------------------------------*/

select * from order_header;
select order_id, customer_id, employee_id, order_date, sub_total, delivery_fee, total_due from order_header where order_date >= '2019-01-01' and order_date <= '2019-01-07' order by customer_id asc;
select order_id, customer_id, employee_id, order_date, sub_total, delivery_fee, total_due from order_header where order_date between '2019-01-01' and '2019-01-07' order by customer_id asc;
    
    
-- -----------------------------------------------------------------------------------------------------------------------------------------------

SELECT * FROM ORDER_HEADER;
SELECT ORDER_ID, CUSTOMER_ID, EMPLOYEE_ID, ORDER_DATE, SUB_TOTAL, DELIVERY_FEE, TOTAL_DUE
	FROM ORDER_HEADER
	WHERE ORDER_DATE BETWEEN '2019-01-01' AND '2019-01-07';



/*________________________________________________________________________________________________________________________________________________
    
	Q29) 2019-01-01 ~ 2019-01-07 기간 주문의 주문번호, 고객아이디, 사원번호, 주문일시, 소계, 배송비, 전체금액을 조회하세요.
	     단, 전체금액을 기준으로 내림차순 정렬해서 조회하세요.

-------------------------------------------------------------------------------------------------------------------------------------------------*/

select * from order_header;
select order_id, customer_id, employee_id, order_date, sub_total, delivery_fee, total_due from order_header where order_date >= '2019-01-01' and order_date <= '2019-01-07' order by total_due desc;
select order_id, customer_id, employee_id, order_date, sub_total, delivery_fee, total_due from order_header where order_date between '2019-01-01' and '2019-01-07' order by total_due desc;
    
    
-- -----------------------------------------------------------------------------------------------------------------------------------------------

SELECT ORDER_ID, CUSTOMER_ID, EMPLOYEE_ID, ORDER_DATE, SUB_TOTAL, DELIVERY_FEE, TOTAL_DUE
	FROM ORDER_HEADER
	WHERE ORDER_DATE BETWEEN '2019-01-01' AND '2019-01-07'
    ORDER BY TOTAL_DUE DESC;



/*________________________________________________________________________________________________________________________________________________

	Q30) 2019-01-01 ~ 2019-01-07 기간 주문의 주문번호, 고객아이디, 사원번호, 주문일시, 소계, 배송비, 전체금액을 조회하세요.
	     단, 사원번호를 기준으로 오름차순, 같은 사원번호는 주문일시를 기준으로 내림차순 정렬해서 조회하세요.

-------------------------------------------------------------------------------------------------------------------------------------------------*/

select * from order_header;
select order_id, customer_id, employee_id, order_date, sub_total, delivery_fee, total_due from order_header where order_date >= '2019-01-01' and order_date <= '2019-01-07' order by employee_id asc, order_date desc;
select order_id, customer_id, employee_id, order_date, sub_total, delivery_fee, total_due from order_header where order_date between '2019-01-01' and '2019-01-07' order by employee_id asc, order_date desc;
    
    
-- -----------------------------------------------------------------------------------------------------------------------------------------------

SELECT ORDER_ID, CUSTOMER_ID, EMPLOYEE_ID, ORDER_DATE, SUB_TOTAL, DELIVERY_FEE, TOTAL_DUE
	FROM ORDER_HEADER
	WHERE ORDER_DATE BETWEEN '2019-01-01' AND '2019-01-07'
    ORDER BY EMPLOYEE_ID ASC, ORDER_DATE DESC;



/*================================================================================================================================================
==================================================================================================================================================

	그룹함수
    
==================================================================================================================================================
=================================================================================================================================================*/

show databases;
use myshop2019;
select database();
show tables;



/*________________________________________________________________________________________________________________________________________________

	customer 테이블 사용
    
_________________________________________________________________________________________________________________________________________________*/

/*________________________________________________________________________________________________________________________________________________

	Q01) 고객의 포인트 합을 조회하세요.

-------------------------------------------------------------------------------------------------------------------------------------------------*/

SELECT SUM(POINT) FROM CUSTOMER;
SELECT CONCAT(FORMAT(SUM(POINT),0), '원') AS POINT FROM CUSTOMER;
    
    
-- -----------------------------------------------------------------------------------------------------------------------------------------------

SELECT SUM(POINT) FROM CUSTOMER;
SELECT CONCAT(FORMAT(SUM(POINT),0), '원') AS POINT FROM CUSTOMER;



/*________________________________________________________________________________________________________________________________________________

	Q02) '서울' 지역 고객의 포인트 합을 조회하세요.

-------------------------------------------------------------------------------------------------------------------------------------------------*/

select * from customer;
select city 지역, count(*) 고객수, format(sum(point), 0) 포인트총합 from customer where city = '서울';
-- ㄴ 오답, 강사님의 쿼리는 concat과 format 함수를 사용해 깔끔하게 합계만 조회함

select sum(point) from customer where city = '서울';
select concat(format(sum(point), 0), '원') as point from customer where city = '서울';
    
    
-- -----------------------------------------------------------------------------------------------------------------------------------------------

SELECT SUM(POINT) FROM CUSTOMER 
	WHERE CITY = '서울';
SELECT CONCAT(FORMAT(SUM(POINT),0), '원') AS POINT 
	FROM CUSTOMER
    WHERE CITY = '서울';



/*________________________________________________________________________________________________________________________________________________

	Q03) '서울' 지역 고객의 수를 조회하세요.

-------------------------------------------------------------------------------------------------------------------------------------------------*/

select * from customer;
select city 지역, count(*) 고객수 from customer where city = '서울';
    
    
-- -----------------------------------------------------------------------------------------------------------------------------------------------

SELECT COUNT(*) FROM CUSTOMER
	WHERE CITY = '서울';



/*________________________________________________________________________________________________________________________________________________

	Q04) '서울' 지역 고객의 포인트 합과 평균을 조회하세요.

-------------------------------------------------------------------------------------------------------------------------------------------------*/

select * from customer;
select city 지역, count(*) 고객수, format(sum(point), 0) 포인트총합, format(avg(point), 0) 포인트평균 from customer where city = '서울';
    
    
-- -----------------------------------------------------------------------------------------------------------------------------------------------

SELECT SUM(POINT), AVG(POINT) FROM CUSTOMER
	WHERE CITY = '서울';



/*________________________________________________________________________________________________________________________________________________
     
	Q05) '서울' 지역 고객의 포인트 합, 평균, 최댓값, 최솟값을 조회하세요.

-------------------------------------------------------------------------------------------------------------------------------------------------*/

select * from customer;
select city 지역, count(*) 고객수, format(sum(point), 0) 포인트총합, format(avg(point), 0) 포인트평균, format(max(point), 0) 포인트최대값, format(min(point), 0) 포인트최소값 from customer where city = '서울';
    
    
-- -----------------------------------------------------------------------------------------------------------------------------------------------

SELECT SUM(POINT), AVG(POINT), MAX(POINT), MIN(POINT)
	FROM CUSTOMER WHERE CITY = '서울';



/*________________________________________________________________________________________________________________________________________________

	Q06) 남녀별 고객의 수를 조회하세요.

-------------------------------------------------------------------------------------------------------------------------------------------------*/

select * from customer;
select gender 성, count(*) 고객수 from customer group by gender;
-- ㄴ 오답, 출력 결과값은 동일하게 나오나 다른 접근 방식으로 강사님 쿼리는 case 문을 사용해 성별 구분을 명시적으로 표현함

select case gender when 'M' then '남자' else '여자' end as gender, count(gender) from customer group by gender;
    
    
-- -----------------------------------------------------------------------------------------------------------------------------------------------

SELECT GENDER, COUNT(GENDER) FROM CUSTOMER GROUP BY GENDER;

SELECT  CASE GENDER
			WHEN 'M'  THEN '남자'
			ELSE '여자'
        END
        AS GENDER
        , COUNT(GENDER) 
FROM CUSTOMER 
GROUP BY GENDER;
    
    
-- -----------------------------------------------------------------------------------------------------------------------------------------------
-- < 퍼플렉시티가 답변한 가독성 및 표준성 측면에서의 답 >

	SELECT 
		CASE gender
			WHEN 'M' THEN '남자'
			WHEN 'F' THEN '여자'
			ELSE '기타'
		END AS 성별,
		COUNT(*) AS 고객수
	FROM customer
	GROUP BY gender;



/*________________________________________________________________________________________________________________________________________________

	Q07) 지역별 고객의 수를 조회하세요.
	     단, 지역 이름을 기준으로 오름차순 정렬해서 조회하세요.

-------------------------------------------------------------------------------------------------------------------------------------------------*/

select * from customer;
select city 지역, count(*) 고객수 from customer group by city order by city asc;
    
    
-- -----------------------------------------------------------------------------------------------------------------------------------------------

SELECT CITY, COUNT(CITY) 
	FROM CUSTOMER 
    GROUP BY CITY;



/*________________________________________________________________________________________________________________________________________________

	Q08) 지역별 고객의 수를 조회하세요.
	     단, 고객의 수가 10명 이상인 행만 지역 이름을 기준으로 오름차순 정렬해서 조회하세요.

-------------------------------------------------------------------------------------------------------------------------------------------------*/

select * from customer;
select city 지역, count(*) 고객수 from customer group by city having count(*) >= 10 order by city asc;
-- ㄴ 정답, 출력 결과값은 동일하게 나오나 강사님 쿼리의 count는 sql 예약어(함수)이고, 집계 함수 결과에 바로 조건을 걸 때는
-- 	  count(city)처럼 함수 형태를 사용해야 함, 또한 별칭()을 having에서 사용해야 하지만 별칭 비교는 mysql에서는 가능하나 일부 DBMS에서는 안되므로
-- 	  혼동의 소지가 있음, 또한 정렬 구문(order by)이 빠져있어 '지역 지음을 기준으로 오름차순 정렬' 조건이 반영되지 않음
    
    
-- -----------------------------------------------------------------------------------------------------------------------------------------------

SELECT CITY, COUNT(CITY) COUNT
	FROM CUSTOMER 
    GROUP BY CITY
    HAVING COUNT >= 10;
    
    
-- -----------------------------------------------------------------------------------------------------------------------------------------------
-- < 퍼플렉시티가 답변한 가독성 및 표준성 측면에서의 답 >

	SELECT CITY, COUNT(*) AS 고객수
	FROM CUSTOMER
	GROUP BY CITY
	HAVING COUNT(*) >= 10
	ORDER BY CITY ASC;



/*________________________________________________________________________________________________________________________________________________
   
	Q09) 남녀별 포인트 합을 조회하세요.

-------------------------------------------------------------------------------------------------------------------------------------------------*/

select * from customer;
select gender 성, format(sum(point), 0) 포인트총합 from customer group by gender;
    
    
-- -----------------------------------------------------------------------------------------------------------------------------------------------

SELECT GENDER, SUM(POINT) FROM CUSTOMER GROUP BY GENDER;

SELECT CASE GENDER WHEN 'M' THEN '남자'
		ELSE '여자' END AS GENDER, SUM(POINT)
	FROM CUSTOMER
    GROUP BY GENDER;
    
    
-- -----------------------------------------------------------------------------------------------------------------------------------------------
-- < 퍼플렉시티가 답변한 가독성 및 표준성 측면에서의 답 >

	SELECT 
		CASE gender
			WHEN 'M' THEN '남자'
			ELSE '여자'
		END AS 성별,
		FORMAT(SUM(point), 0) AS 포인트총합
	FROM customer
	GROUP BY gender;



/*________________________________________________________________________________________________________________________________________________
    
	Q10) 지역별 포인트 합을 조회하세요.
	     단, 지역 이름을 기준으로 오름차순 정렬해서 조회하세요.

-------------------------------------------------------------------------------------------------------------------------------------------------*/

select * from customer;
select city 지역, format(sum(point), 0) 포인트총합 from customer group by city order by city asc;
    
    
-- -----------------------------------------------------------------------------------------------------------------------------------------------

SELECT CITY, SUM(POINT)
	FROM CUSTOMER
    GROUP BY CITY
    ORDER BY CITY;



/*________________________________________________________________________________________________________________________________________________
    
	Q11) 지역별 포인트 합을 조회하세요.
	     단, 포인트 합이 1,000,000 이상인 행만 포인트 합을 기준으로 내림차순 정렬해서 조회하세요.

-------------------------------------------------------------------------------------------------------------------------------------------------*/

select * from customer;
select city 지역, format(sum(point), 0) 포인트총합 from customer group by city having sum(point) >= 1000000 order by city desc;
-- ㄴ 정답, 출력 결과값은 동일하게 나오나 강사님 쿼리의 tot_point는 별칭()이므로 having에서 사용할 수 있지만
-- 	  일부 DBMS(mysql emd)에서는 가능하나 일부 DBMS(oracle, sql server)에서는 허용하지 않음
-- 	  호환성을 위해 having sum(point) >= 1000000으로 명확히 쓰는 것이 안전함
    
    
-- -----------------------------------------------------------------------------------------------------------------------------------------------

SELECT CITY, SUM(POINT) TOT_POINT
	FROM CUSTOMER
    GROUP BY CITY
    HAVING TOT_POINT >= 1000000
    ORDER BY TOT_POINT DESC;
    
    
-- -----------------------------------------------------------------------------------------------------------------------------------------------
-- < 퍼플렉시티가 답변한 가독성 및 표준성 측면에서의 답 >

	SELECT city AS 지역, FORMAT(SUM(point), 0) AS 포인트총합
	FROM customer
	GROUP BY city
	HAVING SUM(point) >= 1000000
	ORDER BY SUM(point) DESC;



/*________________________________________________________________________________________________________________________________________________
      
	Q12) 지역별 포인트 합을 조회하세요.
	     단, 포인트 합을 기준으로 내림차순 정렬해서 조회하세요.

-------------------------------------------------------------------------------------------------------------------------------------------------*/

select * from customer;
select city 지역, format(sum(point), 0) 포인트총합 from customer group by city order by 포인트총합 desc;
    
    
-- -----------------------------------------------------------------------------------------------------------------------------------------------

  SELECT CITY, SUM(POINT) TOT_POINT
	FROM CUSTOMER
    GROUP BY CITY
    ORDER BY TOT_POINT DESC; 



/*________________________________________________________________________________________________________________________________________________
   
	Q13) 지역별 고객의 수, 포인트 합을 조회하세요.
	     단, 지역 이름을 기준으로 오름차순 정렬해서 조회하세요.

-------------------------------------------------------------------------------------------------------------------------------------------------*/

select * from customer;
select city 지역, format(count(*), 0) 고객수, format(sum(point), 0) 포인트총합 from customer group by city order by city asc;
    
    
-- -----------------------------------------------------------------------------------------------------------------------------------------------

SELECT CITY, COUNT(CITY), SUM(POINT)
	FROM CUSTOMER
    GROUP BY CITY
    ORDER BY CITY DESC;



/*________________________________________________________________________________________________________________________________________________

	Q14) 지역별 포인트 합, 포인트 평균을 조회하세요.
	     단, 포인트가 NULL이 아닌 고객을 대상으로 하며, 지역 이름을 기준으로 오름차순 정렬해서 조회하세요.

-------------------------------------------------------------------------------------------------------------------------------------------------*/

select * from customer;
select city 지역, format(sum(point), 0) 포인트총합, format(avg(point), 0) 포인트평균 from customer where point is not null group by city order by city asc;
    
    
-- -----------------------------------------------------------------------------------------------------------------------------------------------

SELECT CITY, SUM(POINT), AVG(POINT)
	FROM CUSTOMER
    WHERE POINT IS NOT NULL
    GROUP BY CITY
    ORDER BY CITY DESC;



/*________________________________________________________________________________________________________________________________________________

	Q15) '서울', '부산', '대구' 지역 고객의 지역별, 남녀별 포인트 합과 평균을 조회하세요.
	     단, 지역 이름을 기준으로 오름차순, 같은 지역은 성별을 기준으로 오름차순 정렬해서 조회하세요.

-------------------------------------------------------------------------------------------------------------------------------------------------*/

select city 지역, gender 성, format(sum(point), 0) 포인트총합, format(avg(point), 0) 포인트평균
from customer
where city in ('서울', '부산', '대구')
group by city, gender
order by city asc, gender asc;
    
    
-- -----------------------------------------------------------------------------------------------------------------------------------------------

SELECT CITY, GENDER, SUM(POINT), AVG(POINT)
	FROM CUSTOMER
    WHERE CITY IN ('서울', '부산', '대구')
    GROUP BY CITY, GENDER
    ORDER BY CITY ASC, GENDER ASC;






/*===============================================================================================================================================*/
/*===============================================================================================================================================*/

show databases;
use myshop2019;
select database();
show tables;



/*________________________________________________________________________________________________________________________________________________

    order_header 테이블 사용
    
_________________________________________________________________________________________________________________________________________________*/

/*________________________________________________________________________________________________________________________________________________
    
	Q16) 2019년 1월 주문에 대하여 고객아이디별 전체금액 합을 조회하세요.

-------------------------------------------------------------------------------------------------------------------------------------------------*/

select * from order_header;
select customer_id 고객아이디, format(sum(total_due), 0) 전체금액합 from order_header where order_date >= '2019-01-01 00:00:00' and order_date < '2019-02-01 00:00:00' group by customer_id;
    
    
-- -----------------------------------------------------------------------------------------------------------------------------------------------

SELECT * FROM ORDER_HEADER;
SELECT CUSTOMER_ID, SUM(TOTAL_DUE)
	FROM ORDER_HEADER
    WHERE LEFT(ORDER_DATE, 7) = '2019-01'
    GROUP BY CUSTOMER_ID;



/*________________________________________________________________________________________________________________________________________________

	Q17) 주문연도별 전체금액 합계를 조회하세요.

-------------------------------------------------------------------------------------------------------------------------------------------------*/

select * from order_header;
select year(order_date) 연도, format(sum(total_due), 0) 전체금액합 from order_header group by year(order_date);
    
    
-- -----------------------------------------------------------------------------------------------------------------------------------------------

SELECT LEFT(ORDER_DATE, 4) '주문연도', SUM(TOTAL_DUE) '전체합계'
	FROM ORDER_HEADER
    GROUP BY LEFT(ORDER_DATE, 4);



/*________________________________________________________________________________________________________________________________________________

	Q18) 2019.01 ~ 2019.06 기간 주문에 대하여 주문연도별, 주문월별 전체금액 합을 조회하세요.

-------------------------------------------------------------------------------------------------------------------------------------------------*/

select * from order_header;
select year(order_date) 연도, month(order_date) 월, format(sum(total_due), 0) 전체금액합 from order_header where order_date >= '2019-01-01 00:00:00' and order_date < '2019-07-01 00:00:00' group by year(order_date), month(order_date);
    
    
-- -----------------------------------------------------------------------------------------------------------------------------------------------

SELECT LEFT(ORDER_DATE, 4) 주문연도, SUBSTRING(ORDER_DATE, 6,2) 주문월, SUM(TOTAL_DUE) 전체금액
	FROM ORDER_HEADER
	WHERE LEFT(ORDER_DATE, 7) BETWEEN '2019-01' AND '2019-06'
    GROUP BY LEFT(ORDER_DATE, 4), SUBSTRING(ORDER_DATE, 6,2);  



/*________________________________________________________________________________________________________________________________________________

	Q19) 2019.01 ~ 2019.06 기간 주문에 대하여 주문연도별, 주문월별 전체금액 합과 평균을 조회하세요.

-------------------------------------------------------------------------------------------------------------------------------------------------*/

select * from order_header;
select year(order_date) 연도, month(order_date) 월, format(sum(total_due), 0) 전체금액합, format(avg(total_due), 0) 전체금액평균 from order_header where order_date >= '2019-01-01 00:00:00' and order_date < '2019-07-01 00:00:00' group by year(order_date), month(order_date);
    
    
-- -----------------------------------------------------------------------------------------------------------------------------------------------

SELECT 	LEFT(ORDER_DATE, 4) 주문연도, 
		SUBSTRING(ORDER_DATE, 6,2) 주문월, 
        SUM(TOTAL_DUE) 전체금액,
        AVG(TOTAL_DUE) 평균
	FROM ORDER_HEADER
	WHERE LEFT(ORDER_DATE, 7) BETWEEN '2019-01' AND '2019-06'
    GROUP BY LEFT(ORDER_DATE, 4), SUBSTRING(ORDER_DATE, 6,2);  



/*________________________________________________________________________________________________________________________________________________

	Q20) 주문연도별, 주문월별 전체금액 합과 평균을 조회하고, rollup 함수를 이용하여 소계와 총계를 출력해주세요.

-------------------------------------------------------------------------------------------------------------------------------------------------*/

SELECT 
    YEAR(order_date) AS 연도,
    MONTH(order_date) AS 월,
    FORMAT(SUM(total_due), 0) AS 전체금액합,
    FORMAT(AVG(total_due), 0) AS 전체금액평균,
    CASE
        WHEN GROUPING(YEAR(order_date)) = 1 AND GROUPING(MONTH(order_date)) = 1 THEN '총계'
        WHEN GROUPING(MONTH(order_date)) = 1 THEN '소계'
        ELSE ''
    END AS 구분
FROM order_header
GROUP BY YEAR(order_date), MONTH(order_date) WITH ROLLUP
ORDER BY 연도, 월;
    
    
-- -----------------------------------------------------------------------------------------------------------------------------------------------

SELECT  if(grouping(YEAR), '연도별 총합계', ifnull(YEAR, '-')) 주문연도,
		IF(GROUPING(MONTH), '월별 총합계',  IFNULL(MONTH, '-')) 주문월,
        SUM(TOTAL_DUE),
        AVG(TOTAL_DUE)
FROM	(SELECT LEFT(ORDER_DATE, 4) YEAR, 
				SUBSTRING(ORDER_DATE, 6,2) MONTH,
                TOTAL_DUE
			FROM ORDER_HEADER
		) T
            GROUP BY YEAR, MONTH WITH ROLLUP
;  -- @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ 이 코드 분해해서 공부하기






/*================================================================================================================================================
==================================================================================================================================================

	테이블 조인
	기본 SQL 방식, ANSI SQL
    
==================================================================================================================================================
=================================================================================================================================================*/

show databases;
use myshop2019;
select database();
show tables;
/* 테이블
- category / product / sub_category
- customer / employee
- order_header / order_header2016 / order_header2017
- order_detail / order_detail2016 / order_detail2017
*/
/*
select @ / from @ / join @ / on @
where @ / group by @ / having @ / order by @;
*/



/*________________________________________________________________________________________________________________________________________________

	Q01) 전체금액이 8,500,000 이상인 주문의 주문번호, 고객아이디, 사원번호, 주문일시, 전체금액을 조회하세요.

-------------------------------------------------------------------------------------------------------------------------------------------------*/

select o.order_id 주문번호, o.customer_id 고객아이디, o.employee_id 사원번호, o.order_date 주문일시, o.total_due 전체금액
from order_header o
where total_due >= 8500000;



/*________________________________________________________________________________________________________________________________________________

	Q02) 위에서 작성한 쿼리문을 복사해 붙여 넣은 후 고객이름도 같이 조회되게 수정하세요.

-------------------------------------------------------------------------------------------------------------------------------------------------*/

select o.order_id 주문번호, c.customer_id 고객아이디, c.customer_name 고객이름, o.employee_id 사원번호, o.order_date 주문일시, o.total_due 전체금액
from order_header o, customer c
where total_due >= 8500000
and o.customer_id = c.customer_id;

-- < 테이블 조인 사용 >
select o.order_id 주문번호, c.customer_id 고객아이디, c.customer_name 고객이름, o.employee_id 사원번호, o.order_date 주문일시, o.total_due 전체금액
from order_header o
join customer c on o.customer_id = c.customer_id
where total_due >= 8500000;

-- < 향상된 테이블 조인 사용 ▶ 고객 정보가 반드시 존재한다면 INNER JOIN 사용 >
select o.order_id 주문번호, c.customer_name 고객이름, o.customer_id, o.employee_id, o.order_date, o.total_due
from order_header o
inner join customer c on o.customer_id = c.customer_id
where o.total_due >= 8500000;

-- < 향상된 테이블 조인 사용 ▶ 만약 주문은 있으나 고객 정보가 없을 수도 있다면(예: 데이터 누락) LEFT OUTER JOIN >
select o.order_id 주문번호, c.customer_name 고객이름, o.customer_id, o.employee_id, o.order_date, o.total_due
from order_header o
left join customer c on o.customer_id = c.customer_id
where o.total_due >= 8500000;



/*________________________________________________________________________________________________________________________________________________

	Q03) Q01 쿼리를 복사해 붙여 넣은 후 직원이름도 같이 조회되게 수정하세요.

-------------------------------------------------------------------------------------------------------------------------------------------------*/

select o.order_id 주문번호, o.customer_id 고객아이디, e.employee_name 사원이름, o.order_date 주문일시, o.total_due 전체금액
from order_header o, employee e
where total_due >= 8500000
and o.employee_id = e.employee_id;

-- < 테이블 조인 사용 >
select o.order_id 주문번호, o.customer_id 고객아이디, e.employee_name 사원이름, o.order_date 주문일시, o.total_due 전체금액
from order_header o
join employee e on o.employee_id = e.employee_id
where total_due >= 8500000;

-- < 향상된 테이블 조인 사용 ▶ 직원(사원) 정보가 반드시 있어야 하면 INNER JOIN >
select o.order_id 주문번호, e.employee_name 사원이름, o.customer_id, o.employee_id, o.order_date, o.total_due
from order_header o
inner join employee e on o.employee_id = e.employee_id
where o.total_due >= 8500000;

-- < 향상된 테이블 조인 사용 ▶ 직원 정보가 없을 수 있으면 LEFT OUTER JOIN >
select o.order_id 주문번호, e.employee_name 사원이름, o.customer_id, o.employee_id, o.order_date, o.total_due
from order_header o
left join employee e on o.employee_id = e.employee_id
where o.total_due >= 8500000;



/*________________________________________________________________________________________________________________________________________________

	Q04) 위에서 작성한 쿼리문을 복사해 붙여 넣은 후 고객이름, 직원이름도 같이 조회되게 수정하세요.

-------------------------------------------------------------------------------------------------------------------------------------------------*/

select o.order_id 주문번호, o.customer_id 고객아이디, c.customer_name 고객이름, e.employee_name 사원이름, o.order_date 주문일시, o.total_due 전체금액
from order_header o, customer c, employee e
where total_due >= 8500000
and o.customer_id = c.customer_id
and o.employee_id = e.employee_id;

-- < 테이블 조인 사용 >
select o.order_id 주문번호, o.customer_id 고객아이디, c.customer_name 고객이름, e.employee_name 사원이름, o.order_date 주문일시, o.total_due 전체금액
from order_header o
join customer c on o.customer_id = c.customer_id
join employee e on o.employee_id = e.employee_id
where total_due >= 8500000;

-- < 향상된 테이블 조인 사용 ▶ 직원 정보가 없을 수 있으면 LEFT OUTER JOIN >
select o.order_id, c.customer_name, e.employee_name, o.customer_id, o.employee_id, o.order_date, o.total_due
from order_header o
inner join customer c on o.customer_id = c.customer_id
inner join employee e on o.employee_id = e.employee_id
where o.total_due >= 8500000;

-- < 향상된 테이블 조인 사용 ▶ 고객 또는 직원 정보가 없을 수도 있다면, 주문(기준)에서 둘 다 포함시키려면 LEFT OUTER JOIN 두 번 >
select o.order_id, c.customer_name, e.employee_name, o.customer_id, o.employee_id, o.order_date, o.total_due
from order_header o
left join customer c on o.customer_id = c.customer_id
left join employee e on o.employee_id = e.employee_id
where o.total_due >= 8500000;



/*________________________________________________________________________________________________________________________________________________

	Q05) 위에서 작성한 쿼리문을 복사해 붙여 넣은 후 전체금액이 8,500,000 이상인 '서울' 지역 고객만 조회되게 수정하세요.

-------------------------------------------------------------------------------------------------------------------------------------------------*/

select o.order_id 주문번호, o.customer_id 고객아이디, c.customer_name 고객이름, c.city 고객거주지역, e.employee_name 사원이름, o.order_date 주문일시, o.total_due 전체금액
from order_header o, customer c, employee e
where total_due >= 8500000
and c.city = '서울'
and o.customer_id = c.customer_id
and o.employee_id = e.employee_id;

-- < 테이블 조인 사용 >
select o.order_id 주문번호, o.customer_id 고객아이디, c.customer_name 고객이름, c.city 고객거주지역, e.employee_name 사원이름, o.order_date 주문일시, o.total_due 전체금액
from order_header o
join customer c on o.customer_id = c.customer_id
join employee e on o.employee_id = e.employee_id
where total_due >= 8500000
and c.city = '서울';

-- < 향상된 테이블 조인 사용 ▶ 지역 조건으로 필터링한다면, 해당 고객 정보가 반드시 있어야 하므로 INNER JOIN + WHERE가 적합 >
select o.order_id, c.customer_name, c.city, e.employee_name, o.customer_id, o.employee_id, o.order_date, o.total_due
from order_header o
inner join customer c on o.customer_id = c.customer_id
inner join employee e on o.employee_id = e.employee_id
where o.total_due >= 8500000
  and c.city = '서울';



/*________________________________________________________________________________________________________________________________________________

	Q06) 위에서 작성한 쿼리문을 복사해 붙여 넣은 후 전체금액이 8,500,000 이상인 '서울' 지역 '남자' 고객만 조회되게 수정하세요.

-------------------------------------------------------------------------------------------------------------------------------------------------*/

select o.order_id 주문번호, o.customer_id 고객아이디, c.customer_name 고객이름, c.city 고객거주지역, c.gender 고객성별, e.employee_name 사원이름, o.order_date 주문일시, o.total_due 전체금액
from order_header o, customer c, employee e
where total_due >= 8500000
and c.city = '서울' and c.gender = 'M'
and o.customer_id = c.customer_id
and o.employee_id = e.employee_id;

-- < 테이블 조인 사용 >
select o.order_id 주문번호, o.customer_id 고객아이디, c.customer_name 고객이름, c.city 고객거주지역, c.gender 고객성별, e.employee_name 사원이름, o.order_date 주문일시, o.total_due 전체금액
from order_header o
join customer c on o.customer_id = c.customer_id
join employee e on o.employee_id = e.employee_id
where total_due >= 8500000
and c.city = '서울' and c.gender = 'M';

-- < 향상된 테이블 조인 사용 ▶ 고객 정보에는 해당 조건이 필요하므로 역시 INNER JOIN + 조건 WHERE 절 >
select o.order_id, c.customer_name, c.city, c.gender, e.employee_name, o.customer_id, o.employee_id, o.order_date, o.total_due
from order_header o
inner join customer c on o.customer_id = c.customer_id
inner join employee e on o.employee_id = e.employee_id
where o.total_due >= 8500000
  and c.city = '서울'
  and c.gender = 'M';



/*________________________________________________________________________________________________________________________________________________

	Q07) 주문수량이 30개 이상인 주문의 주문번호, 상품코드, 주문수량, 단가, 지불금액을 조회하세요.

-------------------------------------------------------------------------------------------------------------------------------------------------*/

select o.order_id 주문번호, p.product_id 상품코드, o.order_qty 주문수량, o.unit_price 상품단가, o.line_total 지불금액
from order_detail o, product p
where o.product_id = p.product_id;

-- < 테이블 조인 사용 >
select o.order_id 주문번호, p.product_id 상품코드, o.order_qty 주문수량, o.unit_price 상품단가, o.line_total 지불금액
from order_detail o
join product p on o.product_id = p.product_id
where o.order_qty >= 30;

-- < 향상된 테이블 조인 사용 ▶ 주문상세 + 상품은 같이 있어야 하므로 INNER JOIN >
select od.order_id, p.product_id, od.order_qty, od.unit_price, od.line_total
from order_detail od
inner join product p on od.product_id = p.product_id
where od.order_qty >= 30;

-- < 향상된 테이블 조인 사용 ▶ 만약 상품 정보가 없을 수도 있지만 주문 상세는 보고 싶은 경우(드물지만 가능) LEFT OUTER JOIN >
select od.order_id, p.product_id, od.order_qty, od.unit_price, od.line_total
from order_detail od
left join product p on od.product_id = p.product_id
where od.order_qty >= 30;



/*________________________________________________________________________________________________________________________________________________

	Q08) 위에서 작성한 쿼리문을 복사해서 붙여 넣은 후 상품이름도 같이 조회되도록 수정하세요.

-------------------------------------------------------------------------------------------------------------------------------------------------*/

select o.order_id 주문번호, p.product_id 상품코드, p. product_name 상품이름, o.order_qty 주문수량, o.unit_price 상품단가, o.line_total 지불금액
from order_detail o, product p
where o.product_id = p.product_id;

-- < 테이블 조인 사용 >
select o.order_id 주문번호, p.product_id 상품코드, p. product_name 상품이름, o.order_qty 주문수량, o.unit_price 상품단가, o.line_total 지불금액
from order_detail o
join product p on o.product_id = p.product_id
where o.order_qty >= 30;

-- < 향상된 테이블 조인 사용 (조인 유형 동일) >
select od.order_id, p.product_id, p.product_name, od.order_qty, od.unit_price, od.line_total
from order_detail od
inner join product p on od.product_id = p.product_id
where od.order_qty >= 30;



/*________________________________________________________________________________________________________________________________________________

	Q09) 상품코드, 상품이름, 소분류아이디를 조회하세요.

-------------------------------------------------------------------------------------------------------------------------------------------------*/

select p.product_id 상품코드, p.product_name 상품이름, s.sub_category_id 소분류코드
from product p, sub_category s
where p.sub_category_id = s.sub_category_id;

-- < 테이블 조인 사용 >
select p.product_id 상품코드, p.product_name 상품이름, s.sub_category_id 소분류코드
from product p
join sub_category s on p.sub_category_id = s.sub_category_id;

-- < 향상된 테이블 조인 사용 ▶ 상품은 소분류가 필수라면 INNER JOIN >
select p.product_id, p.product_name, s.sub_category_id
from product p
inner join sub_category s on p.sub_category_id = s.sub_category_id;

-- < 향상된 테이블 조인 사용 ▶ 소분류 없는 경우까지 포함하려면 LEFT OUTER JOIN >
select p.product_id, p.product_name, s.sub_category_id
from product p
left join sub_category s on p.sub_category_id = s.sub_category_id;



/*________________________________________________________________________________________________________________________________________________

	Q10) 위에서 작성한 쿼리문을 복사해서 붙여 넣은 후 소분류이름, 대분류아이디가 조회되게 수정하세요.

-------------------------------------------------------------------------------------------------------------------------------------------------*/

select s.sub_category_name 상품소분류, p.product_id 상품대분류코드
from product p, sub_category s
where p.sub_category_id = s.sub_category_id;

-- < 테이블 조인 사용 >
select s.sub_category_name 상품소분류, p.product_id 상품대분류코드
from product p
join sub_category s on p.sub_category_id = s.sub_category_id;

-- < 향상된 테이블 조인 사용 (조인 유형 동일) >
select s.sub_category_name, p.product_id
from product p
inner join sub_category s on p.sub_category_id = s.sub_category_id;



/*________________________________________________________________________________________________________________________________________________

	Q11) 다정한 사원이 2019년에 주문한 상품명을 모두 출력해주세요.

-------------------------------------------------------------------------------------------------------------------------------------------------*/

select e.employee_name 사원이름, left(oh.order_date, 4) 주문년도, p.product_name 주문상품
from employee e, order_header oh, order_detail od, product p
where oh.order_id = od.order_id
and oh.employee_id = e.employee_id
and od.product_id = p.product_id
and left(oh.order_date, 4) = '2019'
and e.employee_name = '다정한';

-- < 테이블 조인 사용 >
select e.employee_name 사원이름, left(oh.order_date, 4) 주문년도, p.product_name 주문상품
from employee e
join order_header oh on oh.employee_id = e.employee_id
join order_detail od on od.order_id = oh.order_id
join product p on od.product_id = p.product_id
where left(oh.order_date, 4) = '2019'
and e.employee_name = '다정한';

-- < 향상된 테이블 조인 사용 ▶ 4개 테이블 모두 존재해야 하므로 다중 INNER JOIN >
select e.employee_name, left(oh.order_date, 4) 주문년도, p.product_name
from employee e
inner join order_header oh on oh.employee_id = e.employee_id
inner join order_detail od on od.order_id = oh.order_id
inner join product p on od.product_id = p.product_id
where left(oh.order_date, 4) = '2019'
  and e.employee_name = '다정한';



/*________________________________________________________________________________________________________________________________________________

	Q12) 청소기를 구입한 고객아이디, 사원번호, 주문번호, 주문일시를 조회하세요.

-------------------------------------------------------------------------------------------------------------------------------------------------*/

select od.product_id 청소기분류코드, c.customer_id 고객아이디, e.employee_id 사원번호, od.order_id 주문번호, oh.order_date 주문일시
from product p, customer c, employee e, order_header oh, order_detail od
where od.product_id = p.product_id
and c.customer_id = oh.customer_id
and od.order_id = oh.order_id
and e.employee_id = oh.employee_id
and p.product_id between 'ED007' and 'ED009';

-- < 테이블 조인 사용 >
select * from product;
select * from customer;
select * from employee;
select * from order_header;
select * from order_detail;
select od.product_id 청소기분류코드, c.customer_id 고객아이디, e.employee_id 사원번호, od.order_id 주문번호, oh.order_date 주문일시
from product p
join order_detail od on od.product_id = p.product_id
join order_header oh on oh.order_id = od.order_id
join customer c on c.customer_id = oh.customer_id
join employee e on e.employee_id = oh.employee_id
where p.product_id between 'ED007' and 'ED009';

-- < 향상된 테이블 조인 사용 ▶ 관련 테이블 모두 있어야 하므로 다중 INNER JOIN 적용 >
select od.product_id, c.customer_id, e.employee_id, od.order_id, oh.order_date
from product p
inner join order_detail od on od.product_id = p.product_id
inner join order_header oh on oh.order_id = od.order_id
inner join customer c on c.customer_id = oh.customer_id
inner join employee e on e.employee_id = oh.employee_id
where p.product_id between 'ED007' and 'ED009';






/*================================================================================================================================================
==================================================================================================================================================

	서브쿼리
    
==================================================================================================================================================
=================================================================================================================================================*/

/*________________________________________________________________________________________________________________________________________________

	Q01) 'mtkim', 'odoh', 'soyoukim', 'winterkim' 고객 주문의 주문번호, 고객아이디, 주문일시, 전체금액을 조회하세요.

-------------------------------------------------------------------------------------------------------------------------------------------------*/

	select * from order_header;



/*________________________________________________________________________________________________________________________________________________

	Q02) '전주' 지역 고객의 아이디를 조회하세요.

-------------------------------------------------------------------------------------------------------------------------------------------------*/

	



/*________________________________________________________________________________________________________________________________________________

	Q03) 위 두 쿼리문을 조합해서 하위 쿼리를 사용해 '전주' 지역 고객 주문의 주문번호, 고객아이디, 주문일시, 전체금액을 조회하세요.

-------------------------------------------------------------------------------------------------------------------------------------------------*/

	



/*________________________________________________________________________________________________________________________________________________

	Q04) 고객의 포인트 최댓값을 조회하세요.

-------------------------------------------------------------------------------------------------------------------------------------------------*/

	



/*________________________________________________________________________________________________________________________________________________

	Q05) 하위 쿼리를 사용해 가장 포인트가 많은 고객의 이름, 아이디, 등록일, 포인트를 조회하세요.

-------------------------------------------------------------------------------------------------------------------------------------------------*/

	



/*________________________________________________________________________________________________________________________________________________

	Q06) 하위 쿼리를 사용해 홍길동(gdhong) 고객보다 포인트가 많은 고객 이름, 아이디, 등록일, 포인트를 조회하세요.

-------------------------------------------------------------------------------------------------------------------------------------------------*/

	



/*________________________________________________________________________________________________________________________________________________

	Q07) 하위 쿼리를 사용해 홍길동(gdhong) 고객과 같은 지역의 고객 이름, 아이디, 지역, 등록일, 포인트를 조회하세요.
	     단, 고객 이름을 기준으로 오름차순 정렬해서 조회하세요.

-------------------------------------------------------------------------------------------------------------------------------------------------*/

	



/*________________________________________________________________________________________________________________________________________________

	Q08) 하위 쿼리를 사용해 홍길동(gdhong) 고객보다 포인트가 많은 고객 이름, 아이디, 등록일, 포인트를 조회하고, 행번호를 추가하여 출력하세요.

-------------------------------------------------------------------------------------------------------------------------------------------------*/

	





